#!/usr/bin/env python

import os
import time
import threading
import time
import json
import threading
import io
from datetime import datetime

from socketserver import ThreadingMixIn, UnixStreamServer, BaseRequestHandler
from typing import TextIO

ROFICATION_NAME = 'rofication'
ROFICATION_URL = 'https://github.com/regolith-linux/regolith-rofication'
ROFICATION_VERSION = '1.2.2'
__version__ = ROFICATION_VERSION

ROFICATION_UNIX_SOCK = '/tmp/rofi_notification_daemon'


from enum import IntEnum
from typing import Tuple, Sequence, Mapping
from typing import Iterable, Iterator, MutableMapping, Mapping, Optional
from warnings import warn

from collections.abc import MutableSequence, Callable
from subprocess import check_output
from typing import Optional

from dbus import service, SessionBus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository.GLib import MainLoop

from pathlib import Path

class Event:
    def __init__(self) -> None:
        self._observers: MutableSequence[Callable] = []

    def __iadd__(self, observer: Callable) -> 'Event':
        self._observers.append(observer)
        return self

    def notify(self, *args, **kwargs) -> None:
        for observer in self._observers:
            observer(*args, **kwargs)


class Resource:
    def __init__(self, default: str, xres_name: str, env_name: Optional[str] = None):
        self.default: str = default
        self.xres_name: str = xres_name
        self.env_name: Optional[str] = env_name

    def fetch(self) -> str:
        env_val = None
        if self.env_name:
            env_val = os.getenv(self.env_name)

        # avoid calling xrescat if the environment variable is set
        if env_val is None:
            cmd = ('/usr/bin/xrescat', self.xres_name, self.default)
            return check_output(cmd, universal_newlines=True)
        else:
            return env_val

class Urgency(IntEnum):
    LOW = 0
    NORMAL = 1
    CRITICAL = 2

class CloseReason(IntEnum):
    EXPIRED = 1
    DISMISSED = 2
    CLOSED = 3
    RESERVED = 4

class Notification:
    def __init__(self) -> None:
        self.id: Optional[int] = None
        self.deadline: Optional[float] = None
        self.summary: Optional[str] = None
        self.body: Optional[str] = None
        self.application: Optional[str] = None
        self.icon: Optional[str] = None
        self.urgency: Urgency = Urgency.NORMAL
        self.actions: Sequence[str] = ()
        self.hints: Mapping[str, any] = {}
        self.timestamp = None

    def asdict(self) -> Mapping[str, any]:
        return {field: value for field, value in vars(self).items() if value is not None}

    @classmethod
    def make(cls, dct: Mapping[str, any]) -> 'Notification':
        notification: 'Notification' = cls()
        notification.id = dct.get('id')
        notification.deadline = dct.get('deadline')
        notification.summary = dct.get('summary')
        notification.body = dct.get('body')
        notification.application = dct.get('application')
        notification.icon = dct.get('icon')
        notification.urgency = Urgency(dct.get('urgency', Urgency.NORMAL))
        notification.actions = tuple(dct.get('actions', ()))
        notification.hints = dct.get('hints')
        notification.timestamp = dct.get('timestamp', '')
        return notification

ALLOWED_TO_EXPIRE = ('notify-send',)
SINGLE_NOTIFICATION_APPS = ('VLC media player',)

class NotificationQueue:
    def __init__(self, mapping: Mapping[int, Notification] = None) -> None:
        self._lock = threading.Lock()
        self._last_id: int = max(mapping.keys()) + 1 if mapping else 1
        self._mapping: MutableMapping[int, Notification] = {} if mapping is None else dict(mapping)
        self.notification_seen = Event()
        self.notification_closed = Event()

    def __len__(self) -> int:
        return len(self._mapping)

    def __iter__(self) -> Iterator[Notification]:
        return iter(self._mapping.values())

    @property
    def lock(self) -> threading.Lock:
        return self._lock

    def save(self, filename: str) -> None:
        try:
            print('Saving notification queue to file')
            with open(filename, 'w') as f:
                json.dump(list(self._mapping.values()), f, default=Notification.asdict)
        except:
            warn('Failed to save notification queue')
            if os.path.exists(filename):
                os.unlink(filename)

    def see(self, nid: int) -> None:
        if nid in self._mapping:
            print(f'Seeing: {nid}')
            notification = self._mapping[nid]
            notification.urgency = Urgency.NORMAL
            self.notification_seen.notify(notification)
            return
        warn(f'Unable to find notification {nid}')

    def remove(self, nid: int) -> None:
        if nid in self._mapping:
            print(f'Removing: {nid}')
            del self._mapping[nid]
            return
        warn(f'Unable to find notification {nid}')

    def remove_all(self, nids: Iterable[int]) -> None:
        for nid in nids:
            self.remove(nid)

    def put(self, notification: Notification) -> None:
        to_replace: Optional[int]
        if notification.application in 'Spotify':
            return

        if notification.application in 'Discord':
            return

        if notification.application in 'discord':
            return

        if notification.application in SINGLE_NOTIFICATION_APPS:
            # replace notification for applications that only allow one
            to_replace = next((ntf.id for ntf in self._mapping.values()
                               if ntf.application == notification.application), None)
        else:
            # cannot have two notifications with the same ID
            to_replace = notification.id if notification.id in self._mapping else None

        if to_replace:
            notification.id = to_replace
            print(f'Replacing: {notification.id}')
            self._mapping[notification.id] = notification
            return

        notification.id = self._last_id
        self._last_id += 1
        print(f'Adding: {notification.id}')
        self._mapping[notification.id] = notification
        os.system("awm timeout push mail news download")

    def cleanup(self) -> None:
        now = time.time()
        to_remove = [ntf.id for ntf in self._mapping.values()
                     if ntf.deadline and ntf.deadline < now ]
                     #and ntf.application in ALLOWED_TO_EXPIRE]
        if to_remove:
            print(f'Expired: {to_remove}')
            for nid in to_remove:
                self.notification_closed.notify(self._mapping[nid], CloseReason.EXPIRED)
                del self._mapping[nid]

    @classmethod
    def load(cls, filename: str) -> 'NotificationQueue':
        if not os.path.exists(filename):
            print('Creating empty notification queue')
            return cls({})

        try:
            print('Loading notification queue from file')
            with open(filename, 'r') as f:
                mapping = {n.id: n for n in json.load(f, object_hook=Notification.make)}
        except:
            warn('Failed to load notification queue')
            mapping = {}

        return cls(mapping)

class NullTextIO(io.TextIOBase, TextIO):
    def write(self, s: str) -> int:
        return 0


nullio: TextIO = NullTextIO()

class ThreadedUnixStreamServer(ThreadingMixIn, UnixStreamServer):
    def start(self) -> threading.Thread:
        thread = threading.Thread(target=self.serve_forever)
        thread.daemon = True
        #thread.setDaemon(True)
        thread.start()
        return thread


class RoficationRequestHandler(BaseRequestHandler):
    def count(self, fp: TextIO) -> None:
        with self.server.queue.lock:
            crit = 0
            for n in self.server.queue:
                if n.urgency == Urgency.CRITICAL:
                    crit += 1
            fp.write(f'{len(self.server.queue)},{crit}')
            fp.flush()

    def delete(self, nid: int) -> None:
        with self.server.queue.lock:
            self.server.queue.remove(nid)

    def delete_multi(self, ids: str) -> None:
        with self.server.queue.lock:
            to_remove = [int(i) for i in ids.split(',')]
            self.server.queue.remove_all(to_remove)

    def delete_all(self, application: str) -> None:
        with self.server.queue.lock:
            to_remove = [n.id for n in self.server.queue
                         if n.application == application]
            self.server.queue.remove_all(to_remove)

    def list(self, fp: TextIO) -> None:
        with self.server.queue.lock:
            json.dump(list(self.server.queue), fp, default=Notification.asdict)

    def see(self, nid: int) -> None:
        with self.server.queue.lock:
            self.server.queue.see(nid)

    def handle(self) -> None:
        with self.server.queue.lock:
            self.server.queue.cleanup()

        with self.request.makefile(mode='rw', encoding='utf-8') as fp:
            cmd, *args = fp.readline().strip().split(':')
            if cmd == 'num':
                # get number of notifications
                self.count(fp)
            elif cmd == 'del':
                # dismiss an item.
                self.delete(nid=int(args[0]))
            elif cmd == 'delm':
                # dismiss list of notifications.
                self.delete_multi(ids=args[0])
            elif cmd == 'dela':
                # dismiss all items from an application.
                self.delete_all(application=args[0])
            elif cmd == 'list':
                # getting a listing.
                self.list(fp)
            elif cmd == 'see':
                # see an item, set the urgency to normal and activate
                self.see(nid=int(args[0]))


class RoficationServer(ThreadedUnixStreamServer):
    def __init__(self, queue: NotificationQueue, server_address: str = ROFICATION_UNIX_SOCK) -> None:
        # pre-start cleanup
        if os.path.exists(server_address):
            os.remove(server_address)
        super().__init__(server_address, RoficationRequestHandler)
        self.queue: NotificationQueue = queue

    def __exit__(self, *args) -> None:
        super().__exit__(*args)
        # removes the UNIX socket after use
        os.remove(self.server_address)


NOTIFICATIONS_DBUS_INTERFACE = 'org.freedesktop.Notifications'
NOTIFICATIONS_DBUS_OBJECT_PATH = '/org/freedesktop/Notifications'

class RoficationDbusObject(service.Object):
    def __init__(self, queue: NotificationQueue) -> None:
        super().__init__(
            object_path=NOTIFICATIONS_DBUS_OBJECT_PATH,
            bus_name=service.BusName(
                name=NOTIFICATIONS_DBUS_INTERFACE,
                bus=SessionBus(mainloop=DBusGMainLoop())
            )
        )
        self._queue: NotificationQueue = queue

        def notification_seen(notification):
            if 'default' in notification.actions:
                self.ActionInvoked(notification.id, 'default')

        self._queue.notification_seen += notification_seen

        def notification_closed(notification, reason):
            self.NotificationClosed(notification.id, reason)

        self._queue.notification_closed += notification_closed

    @service.signal(NOTIFICATIONS_DBUS_INTERFACE, signature='us')
    def ActionInvoked(self, id_in, action_key_in):
        pass

    @service.method(NOTIFICATIONS_DBUS_INTERFACE, in_signature='u', out_signature='')
    def CloseNotification(self, id: int) -> None:
        with self._queue.lock:
            self._queue.remove(id)

    @service.method(NOTIFICATIONS_DBUS_INTERFACE, in_signature='', out_signature='as')
    def GetCapabilities(self) -> Sequence[str]:
        return 'actions', 'body'

    @service.method(NOTIFICATIONS_DBUS_INTERFACE, in_signature='', out_signature='ssss')
    def GetServerInformation(self) -> Tuple[str, str, str, str]:
        return ROFICATION_NAME, ROFICATION_URL, ROFICATION_VERSION, '1.2'

    @service.signal(NOTIFICATIONS_DBUS_INTERFACE, signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        pass

    @service.method(NOTIFICATIONS_DBUS_INTERFACE, in_signature='susssasa{ss}i', out_signature='u')
    def Notify(self, app_name: str, replaces_id: int, app_icon: str, summary: str,
               body: str, actions: Sequence[str], hints: Mapping[str, any], expire_timeout: int) -> int:
        notification = Notification()
        notification.id = replaces_id
        notification.application = app_name
        notification.summary = summary
        notification.body = body
        notification.icon = app_icon
        if not 'icon_data' in hints:
            notification.hints = hints
        notification.timestamp = datetime.now().timestamp()
        notification.actions = tuple(actions)
        if int(expire_timeout) > 0:
            notification.deadline = time.time() + expire_timeout / 1000.0
        if 'urgency' in hints:
            notification.urgency = Urgency(int(hints['urgency']))
        with self._queue.lock:
            self._queue.put(notification)
        return notification.id

class RoficationDbusService:
    def __init__(self, queue: NotificationQueue) -> None:
        # preserve D-Bus object reference
        self._object = RoficationDbusObject(queue)
        # create GLib mainloop, this is needed to make D-Bus work and takes care of catching signals.
        self._loop = MainLoop()

    def run(self) -> None:
        self._loop.run()

if __name__ == '__main__':
    queue_dir = os.path.expanduser('~/.cache/rofication')
    Path(queue_dir).mkdir(parents=True, exist_ok=True)

    queue_file = os.path.join(queue_dir, "notifications.json")
    not_queue = NotificationQueue.load(queue_file)
    service = RoficationDbusService(not_queue)

    with RoficationServer(not_queue) as server:
        server.start()
        try:
            service.run()
        except:
            server.shutdown()

    #not_queue.save(queue_file)
