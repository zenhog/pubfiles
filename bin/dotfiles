#!/usr/bin/env bash

GITURL=https://github.com/zenhog/dotfiles
DOTURL=https://raw.githubusercontent.com/zenhog/dotfiles/minimal/bin/dot

BASEDIR="$HOME/.myfiles"

function backup() {
  local rand
  read -r rand < \
    <(tr -dc '[:alnum:]' < /dev/urandom | dd bs=1 count=6 2>/dev/null)
  mv -v -- "$1" "${1}.old.$rand"
}

function init() {
  local branch="${1?}"

  clone "$BASEDIR/$branch" "$GITURL" "$branch"
}

function clone() {
  local dir="${1?}" url="${2?}" branch="${3?}"

  local cmd=(git clone --branch="$branch" "$url" "$dir")

  cd "$dir" 2>/dev/null || "${cmd[@]}"

  cd "$dir" &&
    if [[ "$(git remote get-url origin)" != "$url" ||
       "$(git branch --show-current)" != "$branch" ]]
    then
       cd "$HOME"
       backup "$dir"
       "${cmd[@]}"
    fi
}

function crypt() {
  local mod="${1?}"
  local name="${2?}"

  case "$mod" in
    enc)
      tar czf - "$name" | gpg -q --pinentry-mode loopback --symmetric --armor \
        --passphrase-file <(passphrase) --output "$name.tar.gz.gpg"
      ;;
    dec)
      gpg -q --pinentry-mode loopback --decrypt --output - \
        --passphrase-file <(passphrase) "$name" | tar xzf -
      ;;
    tmp)
      local dir="${name%%.private.tar.gz.gpg}.tmp"

      rm -rf "$dir" && mkdir -p "$dir"

      gpg -q --pinentry-mode loopback --decrypt --output - \
        --passphrase-file <(passphrase) "$name" | tar xzf - -C "$dir"
      ;;
  esac
}

function encrypt() {
  local files

  readarray -t files < \
    <(fd -e private --base-directory "$BASEDIR/${1?}" --absolute-path)

  for f in "${files[@]}"; do
    case "$(cmp "$f")" in
      1)
        crypt enc "$f"
        ;;
      2)
        crypt dec "$f"
        ;;
    esac
  done
}

function decrypt() {
  cd "$BASEDIR/$1" || return 1
  local files
  readarray -t files < <(fd -e secret --absolute-path)
  for f in "${files[@]}"; do
    local dir="$(dirname "$f")"
    local file="$(basename "$f")"

    local name="${file%.*}"
    local flag="${file##*.}"

    local s="$dir/${name}.private"

    [[ -f "$s" ]] || gpgcrypt dec "$f" > "$s"

    diff -q "$s" <(gpgcrypt dec "$f") || {
      [[ "$f" -nt "$s" ]] && gpgcrypt dec "$f" > "$s"
    }
  done
}

function diff() {
  local name="${1?}"

  crypt tmp "$name.tar.gz.gpg"

  diff -rq "$name" "$name/$name"
  [[ "$f" -nt "$s" ]] && gpgcrypt enc "$f" > "$s"
}

function resolve() {
  local dir="$(dirname "$1")"
  local file="$(basename "$1")"

  local base="${2:-$HOME}"

  local name="${file%.*}"
  local flag="${file##*.}"

  case "$flag" in
    dot)
      resolve "$name"
      ;;
    private)
      resolve "$name"
      ;;
    readonly)
      resolve "$name"
      ;;
    *)
      return 1
      ;;
  esac
}

# .rootdir
# .
# ignore: *.private
# *.encrypted
function symlink() {
  local target link prefix="$HOME"

  [[ -n "$PREFIX" ]] && prefix="$PREFIX"
  for t in "$@"; do
    unset target link

    target="$PWD/$t"
    link="$prefix/.$t"

    [[ -e "$link" && ! -L "$link" ]] && rename "$link"

    ln -T -svf -- "$target" "$link"
  done
}

function passphrase() {
  declare -g PASSPHRASE

  if [[ -z "$PASSPHRASE" ]]; then
    read -r PASSPHRASE < <(pass show tokens/main 2>/dev/null) ||
      read -r -p 'Passphrase: ' PASSPHRASE
  fi

  echo "$PASSPHRASE"
}

function checkbin() {
  for bin in "$@"; do
    which "$bin" >/dev/null || exit 1
  done
}

function install() {
  checkbin git curl gnupg pass rsync

  local repo="${1?}"

  clone "$repo" && resolve "$repo"
}

function sync() {
  local dir url
  dir="$HOME/.${1}files"
  url="https://github.com/zenhog/${1}files"

  case "$1" in
    pub|dot)
      cd "$dir" || exit 1
      pullpush
      ;;
    sys)
      fixmod "$dir/private"

      sudo rsync -v -RrlDpgo --delete --delete-excluded \
        "${blacklist[@]}" "${files[@]}" "$dir/public"

      sudo rsync -v -RrlDpgo --delete "${!private[@]}" "$dir/private"

      sudo chown -v -R "$USER:$USER" "$dir"/*

      fixmod "$dir/private"

      local -a packages
      readarray -t packages < \
        <(sed -rn '/^[^#]+/p' "$dir/public/etc/packages"/* | sort -u)
      sudo xbps-install -Syu -n "${packages[@]}" || exit 1

      cd "$dir" || exit 1
      pullpush
      ;;
    moz)
      ;;
    all)
      ;;
    *)
      echo "$0 sync [ pub | dot | sys | moz | all ]"
      exit 1
      ;;
  esac
}

function pull() {
  #git stash
  #git pull --rebase
  git rebase --autostash
  #git stash pop
}

function push() {
  git add .
  git commit -m "$(date) on $(hostname)"

  pull

  git push
}

function update() {

  git fetch

  local -a mods

  readarray -t mods < <(git status --porcelain=v1)

  if [[ ${#mods[@]} -gt 0 ]]; then
    push
  else
    pull
  fi
}

function remaster() {
  git checkout --orphan tmp
  git add . --all
  git commit -m "$(date)"
  git branch -D master
  git branch --move tmp master
  git push --set-upstream origin master --force
}

function cleanup() {
  rm -rf .git/refs/original
  git reflog expire --expire=now --all
  git gc --prune=now
  git gc --aggressive --prune=now
}

function mklive() {
  local dir="$HOME/workspace/repos/void-mklive"
  local url=https://github.com/void-linux/void-mklive

  [[ -d "$dir" ]] || git clone "$url" "$dir"

  cd "$dir" || return

  local -a packages
  local -a args=(console=tty0 console=ttyS0,115200n8)
  local -a services=(sshd dbus NetworkManager)
  local -a dirs=(-I /etc/NetworkManager -I /etc/security/sudo_authorized_keys)

  readarray -t packages < <(sed -r '/^$/d' $HOME/.sysfiles/packages/base)

  sudo ./mklive.sh -C "${args[*]}" -p "${packages[*]}" -K \
    -T "Custom Live Image" -S "${services[*]}" -I /root \
    -o $HOME/custom-live-img.iso
}


function main() {
  if [[ $# -eq 0 ]]; then
    readarray -t FUNCS < <(declare -F | awk '{print $3}')
    for f in "${FUNCS[@]}"; do
      "$f"
    done
    exit 1
  fi
  "$@"
}

#which git &>/dev/null || { echo "git not found" && exit 1; }
main "$@"
