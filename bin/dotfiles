#!/usr/bin/env bash

shopt -s nullglob
shopt -s extglob

GITURL=https://github.com/zenhog/dotfiles
DOTURL=https://raw.githubusercontent.com/zenhog/dotfiles/minimal/bin/dot

function backup() {
  local rand
  read -r rand < \
    <(tr -dc '[:alnum:]' < /dev/urandom | dd bs=1 count=6 2>/dev/null)
  mv -v -- "$1" "${1}.old.$rand"
}

function init() {
  local branch="$1"
  local dir="$HOME/.dotfiles/$branch"

  case "$branch" in
    minimal)
      ;;
    public)
      ;;
    private)
      ;;
    mozilla)
      ;;
    system)
      ;;
    secret)
      ;;
    gh-pages)
      ;;
    *)
      return 1
      ;;
  esac

  if
    [[ -d "$dir" ]] &&
    [[ "$(git remote get-url origin)" != "$GITURL" ||
       "$(git branch --show-current)" != "$branch" ]]
  then
      backup "$dir"
  fi

  cd "$dir" || git clone --branch="$branch" "$GITURL" "$dir"
}

function resolve() {
  local name="${1%.*}"
  local flag="${1##*.}"

  case "$flag" in
    dot)
      resolve "$name"
      ;;
    private)
      resolve "$name"
      ;;
    *)
      return 1
      ;;
  esac
}

function symlink() {
  local target link prefix="$HOME"

  [[ -n "$PREFIX" ]] && prefix="$PREFIX"
  for t in "$@"; do
    unset target link

    target="$PWD/$t"
    link="$prefix/.$t"

    [[ -e "$link" && ! -L "$link" ]] && rename "$link"

    ln -T -svf -- "$target" "$link"
  done
}

function passphrase() {
  declare -g PASSPHRASE

  [[ -n "$PASSPHRASE" ]] && {
    echo "$PASSPHRASE" && return
  }

  pass show tokens/main 2>/dev/null || {
    read -r -p 'Passphrase: ' PASSPHRASE && echo "$PASSPHRASE"
  }
}

function checkbin() {
  for bin in "$@"; do
    which "$bin" >/dev/null || exit 1
  done
}

function install() {
  checkbin git curl gnupg pass rsync

  case "$1" in
    minimal|public|private|mozilla)
      ;;
    system)
      sudo rm /etc/runit/runsvdir/default/*
      sudo rsync -v -r --relative --backup-dir=/.backups ./ /
      ;;
    secret)
      cat private/etc/sudoers | sudo EDITOR=tee visudo
      cat private/etc/passwd  | sudo EDITOR=tee vipw
      cat private/etc/gpasswd | sudo EDITOR=tee vigr
      ;;
  esac
}

function sync() {
  local -a blacklist=(
    "--exclude=supervise"
    "--exclude=system-connections"
    "--exclude=credentials.txt"
    "--exclude=*~"
    "--exclude=*.new-*"
  )



  local -a files=(
    /usr/local/bin
    /etc/shells
    /etc/bluetooth
    /etc/xbps.d/
    /etc/acpi/custom.sh
    /etc/acpi/events/custom
    /etc/rc.conf
    /etc/rc.local
    /etc/svd
    /root/.fbtermrc
    /etc/sysctl.conf
    /etc/rsyslog.conf
    /etc/modprobe.d
    /etc/modules-load.d
    /etc/pam.d/sudo
    /etc/pam.d/slim
    /etc/pam.d/login
    /etc/pam.d/i3lock
    /etc/X11/xorg.conf
    /etc/dnscrypt-proxy.toml
    /etc/forwarding-rules.txt
    /etc/tor
    /etc/resolv.conf
    /etc/resolvconf.conf
    /etc/openvpn
    /etc/NetworkManager
    /etc/slim.conf
    /usr/share/slim/themes
    /usr/share/kbd/keymaps/i386/qwerty/us-nocaps.map.gz
    /etc/cgconfig.conf
    /etc/zzz.d
    /etc/udev/rules.d/80-net-name-slot.rules
    /etc/iproute2/rt_tables
    /etc/iproute2/rt_tables.d
    /etc/audit/rules.d
    /etc/ntpd.conf
    /etc/rsyslog.conf
    /etc/default
    /etc/runit/runsvdir/default/
    /etc/lxd-config.yaml
  )
 
  local dir url
  dir="$HOME/.${1}files"
  url="https://github.com/zenhog/${1}files"

  case "$1" in
    pub|dot)
      cd "$dir" || exit 1
      pullpush
      ;;
    sys)
      fixmod "$dir/private"

      sudo rsync -v -RrlDpgo --delete --delete-excluded \
        "${blacklist[@]}" "${files[@]}" "$dir/public"

      sudo rsync -v -RrlDpgo --delete "${!private[@]}" "$dir/private"

      sudo chown -v -R "$USER:$USER" "$dir"/*

      fixmod "$dir/private"

      local -a packages
      readarray -t packages < \
        <(sed -rn '/^[^#]+/p' "$dir/public/etc/packages"/* | sort -u)
      sudo xbps-install -Syu -n "${packages[@]}" || exit 1

      cd "$dir" || exit 1
      pullpush
      ;;
    moz)
      ;;
    all)
      ;;
    *)
      echo "$0 sync [ pub | dot | sys | moz | all ]"
      exit 1
      ;;
  esac
}

function pull() {
  #git stash
  #git pull --rebase
  git rebase --autostash
  #git stash pop
}

function push() {
  git add .
  git commit -m "$(date) on $(hostname)"

  pull

  git push
}

function update() {

  git fetch

  local -a mods

  readarray -t mods < <(git status --porcelain=v1)

  if [[ ${#mods[@]} -gt 0 ]]; then
    push
  else
    pull
  fi
}

function remaster() {
  git checkout --orphan tmp
  git add . --all
  git commit -m "$(date)"
  git branch -D master
  git branch --move tmp master
  git push --set-upstream origin master --force
}

function cleanup() {
  rm -rf .git/refs/original
  git reflog expire --expire=now --all
  git gc --prune=now
  git gc --aggressive --prune=now
}

function mklive() {
  local dir="$HOME/workspace/repos/void-mklive"
  local url=https://github.com/void-linux/void-mklive

  [[ -d "$dir" ]] || git clone "$url" "$dir"

  cd "$dir" || return

  local -a packages
  local -a args=(console=tty0 console=ttyS0,115200n8)
  local -a services=(sshd dbus NetworkManager)
  local -a dirs=(-I /etc/NetworkManager -I /etc/security/sudo_authorized_keys)

  readarray -t packages < <(sed -r '/^$/d' $HOME/.sysfiles/packages/base)

  sudo ./mklive.sh -C "${args[*]}" -p "${packages[*]}" -K \
    -T "Custom Live Image" -S "${services[*]}" -I /root \
    -o $HOME/custom-live-img.iso
}


function main() {
  if [[ $# -eq 0 ]]; then
    readarray -t FUNCS < <(declare -F | awk '{print $3}')
    for f in "${FUNCS[@]}"; do
      "$f"
    done
    exit 1
  fi
  "$@"
}

#which git &>/dev/null || { echo "git not found" && exit 1; }
main "$@"
